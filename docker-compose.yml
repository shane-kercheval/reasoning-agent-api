services:
  # Main Reasoning Agent API
  reasoning-api:
    build: 
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
        # API_TOKENS=token1,token2,token3
      - API_TOKENS=${API_TOKENS}
      - REQUIRE_AUTH=${REQUIRE_AUTH:-true}
      - MCP_CONFIG_PATH=config/mcp_servers.json
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - REASONING_AGENT_BASE_URL=${REASONING_AGENT_BASE_URL:-https://api.openai.com/v1}
      - HTTP_CONNECT_TIMEOUT=${HTTP_CONNECT_TIMEOUT:-5.0}
      - HTTP_READ_TIMEOUT=${HTTP_READ_TIMEOUT:-60.0}
      - HTTP_WRITE_TIMEOUT=${HTTP_WRITE_TIMEOUT:-10.0}
      - HTTP_MAX_CONNECTIONS=${HTTP_MAX_CONNECTIONS:-20}
      - HTTP_MAX_KEEPALIVE_CONNECTIONS=${HTTP_MAX_KEEPALIVE_CONNECTIONS:-5}
      - HTTP_KEEPALIVE_EXPIRY=${HTTP_KEEPALIVE_EXPIRY:-30.0}
    volumes:
      - ./config:/app/config:ro
      - ./prompts:/app/prompts:ro
    depends_on:
      - fake-mcp-server
    networks:
      - reasoning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Client (MonsterUI)
  web-client:
    build:
      context: .
      dockerfile: Dockerfile.web-client
    ports:
      - "8080:8080"
    environment:
      - REASONING_API_URL=http://reasoning-api:8000
      - REASONING_API_TOKEN=${REASONING_API_TOKEN}
        # REASONING_API_TOKEN=token1
      - WEB_CLIENT_PORT=8080
    depends_on:
      - reasoning-api
    networks:
      - reasoning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Fake MCP Server for demos
  fake-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
      - HOST=0.0.0.0
    networks:
      - reasoning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Example: Future MCP servers can be added here
  # additional-mcp-server:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.additional-mcp
  #   ports:
  #     - "8002:8002"
  #   environment:
  #     - PORT=8002
  #     - HOST=0.0.0.0
  #   networks:
  #     - reasoning-network
  #   restart: unless-stopped

  # PostgreSQL Database for Phoenix
  postgres:
    image: postgres:16
    container_name: phoenix-postgres
    environment:
      - POSTGRES_DB=${PHOENIX_POSTGRES_DB:-phoenix}
      - POSTGRES_USER=${POSTGRES_USER:-phoenix_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - phoenix_postgres_data:/var/lib/postgresql/data
    networks:
      - reasoning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-phoenix_user} -d ${PHOENIX_POSTGRES_DB:-phoenix}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Phoenix Arize - LLM Observability Platform
  phoenix:
    image: arizephoenix/phoenix:version-11.7
    container_name: phoenix-arize
    environment:
      - PHOENIX_SQL_DATABASE_URL=postgresql://phoenix_user:${POSTGRES_PASSWORD}@postgres:5432/phoenix
      - PHOENIX_SECRET=a988aa701b8beb323cd1a103fc29e638364b7d8476b2dbf23d0bdbb66c1edc8b
      - PHOENIX_ENABLE_AUTH=false
      - PHOENIX_HOST=0.0.0.0
      - PHOENIX_PORT=6006
    ports:
      - "6006:6006"   # Phoenix UI
      - "4317:4317"   # OTLP gRPC
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - reasoning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6006/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  reasoning-network:
    driver: bridge

volumes:
  phoenix_postgres_data:
    driver: local
