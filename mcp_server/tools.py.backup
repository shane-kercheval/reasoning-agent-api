"""
MCP Tools that return fake data for now
These will be replaced with real implementations later.
"""

import random
from datetime import datetime
from gofastmcp import tool

@tool("web_search")
async def web_search_tool(query: str) -> dict:
    """Search the web for information."""
    # Return fake search results
    fake_results = [
        {
            "title": f"Everything you need to know about {query}",
            "url": f"https://example.com/search/{query.replace(' ', '-')}",
            "snippet": f"Comprehensive information about {query}. This article covers the latest developments and provides in-depth analysis of {query}...",
            "date": "2025-07-12",
            "source": "Example News",
        },
        {
            "title": f"Latest updates on {query}",
            "url": f"https://news.example.com/{query.replace(' ', '-')}-updates",
            "snippet": f"Recent news about {query} shows significant developments. According to experts, {query} has been trending due to...",
            "date": "2025-07-11",
            "source": "Tech Today",
        },
        {
            "title": f"{query}: A complete guide",
            "url": f"https://guide.example.com/{query.replace(' ', '-')}",
            "snippet": f"This comprehensive guide explains {query} in detail, covering all aspects from basics to advanced topics...",
            "date": "2025-07-10",
            "source": "Knowledge Base",
        },
    ]

    return {
        "query": query,
        "results": fake_results,
        "total_results": len(fake_results),
        "search_time": f"{random.uniform(0.1, 0.5):.2f}s",
    }

@tool("weather_api")
async def weather_tool(location: str = "San Francisco") -> dict:
    """Get current weather information."""
    # Generate fake weather data
    conditions = ["Sunny", "Partly Cloudy", "Cloudy", "Light Rain", "Clear"]
    temperatures = list(range(15, 28))

    return {
        "location": location,
        "current": {
            "temperature": f"{random.choice(temperatures)}°C",
            "condition": random.choice(conditions),
            "humidity": f"{random.randint(40, 80)}%",
            "wind": f"{random.randint(5, 20)} km/h {random.choice(['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'])}",
            "pressure": f"{random.randint(1010, 1025)} mb",
        },
        "forecast": [
            {
                "date": "Today",
                "high": f"{random.randint(20, 30)}°C",
                "low": f"{random.randint(10, 18)}°C",
                "condition": random.choice(conditions),
            },
            {
                "date": "Tomorrow",
                "high": f"{random.randint(20, 30)}°C",
                "low": f"{random.randint(10, 18)}°C",
                "condition": random.choice(conditions),
            },
        ],
        "last_updated": datetime.now().isoformat(),
        "source": "Weather API",
    }

@tool("filesystem")
async def filesystem_tool(query: str, path: str = "/documents") -> dict:
    """Search and access filesystem."""
    # Generate fake file results
    file_types = [".txt", ".md", ".pdf", ".docx", ".json"]
    fake_files = []

    for i in range(random.randint(2, 5)):
        filename = f"{query.replace(' ', '_')}_document_{i+1}{random.choice(file_types)}"
        fake_files.append({
            "name": filename,
            "path": f"{path}/{filename}",
            "size": f"{random.randint(1, 100)} KB",
            "modified": "2025-07-12",
            "preview": f"This document contains information about {query}. It includes detailed analysis and relevant data...",
        })

    return {
        "query": query,
        "search_path": path,
        "files_found": fake_files,
        "total_files": len(fake_files),
        "search_time": f"{random.uniform(0.05, 0.2):.2f}s",
    }

@tool("search_news")
async def search_news_tool(query: str) -> dict:
    """Search for recent news articles."""
    fake_news = [
        {
            "headline": f"Breaking: Major developments in {query}",
            "summary": f"Latest news about {query} reveals significant changes in the industry...",
            "url": f"https://news.example.com/breaking-{query.replace(' ', '-')}",
            "published": "2025-07-12T10:30:00Z",
            "source": "News Network",
        },
        {
            "headline": f"{query} trends continue to evolve",
            "summary": f"Analysis shows that {query} is experiencing rapid growth and innovation...",
            "url": f"https://business.example.com/{query.replace(' ', '-')}-trends",
            "published": "2025-07-12T08:15:00Z",
            "source": "Business Today",
        },
    ]

    return {
        "query": query,
        "articles": fake_news,
        "total_articles": len(fake_news),
    }
