[project]
name = "reasoning-agent-api"
version = "0.1.1"
description = "OpenAI-compatible API with reasoning capabilities and web interface"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    # Shared dependencies across all services
    "httpx>=0.28.1",
    "python-dotenv>=1.1.1",
    "uvicorn[standard]>=0.35.0",
    "pydantic>=2.11.7",
]

[dependency-groups]
# API service dependencies
api = [
    "fastapi>=0.116.1",
    "fastmcp>=2.10.5",
    "openai>=1.95.1",
    "pydantic-settings>=2.10.1",
    "python-multipart>=0.0.20",
    "pyyaml>=6.0.2",
    # Phoenix and OpenTelemetry tracing
    "arize-phoenix-otel>=0.12.1",
    "opentelemetry-api>=1.35.0",
    "opentelemetry-sdk>=1.35.0",
    "opentelemetry-exporter-otlp>=1.35.0",
    "openinference-semantic-conventions>=0.1.21",
    "openinference-instrumentation-openai>=0.1.30",
]

# Web client dependencies
web = [
    "python-fasthtml>=0.12.21",
    "monsterui>=1.0.21",
]

# MCP server dependencies
mcp = [
    "fastmcp>=2.10.5",
]

# Development dependencies
dev = [
    "coverage>=7.10.1",
    "flex-evals>=0.1.4",
    "ipykernel>=6.29.5",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-mock>=3.14.1",
    "pytest-timeout>=2.4.0",
    "respx>=0.22.0",
    "rich>=14.0.0",
    "ruff>=0.12.3",
    "sik-llms>=0.3.19",
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "session"
asyncio_default_test_loop_scope = "function"
timeout = 60
timeout_method = "signal"  # note this only works on unix; "thread" method (default) is safer but might not catch hanging subprocesses
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "evaluation: marks tests as LLM behavioral evaluations (opt-in with '-m evaluation')",
]
filterwarnings = [
    "ignore:cannot collect test class 'TestCase' because it has a __init__ constructor:pytest.PytestCollectionWarning",
]


[tool.coverage.run]
omit = [
    "tests/*",
    "*/tests/*"
]
