# MCP Server Configuration
# This file defines the Model Context Protocol (MCP) servers that the reasoning agent can connect to.
# Each server provides tools that can be used during reasoning and problem-solving.

servers:
  # Test MCP server for local development and testing
  # Start with: uv run python tests/mcp_servers/server_a.py
  - name: reasoning_agent_tools
    url: http://localhost:8001/mcp/
    enabled: false  # Disabled by default, enable for testing

  # Example: Web search server (disabled by default)
  - name: web_search
    url: https://mcp-web-search.example.com
    auth_env_var: WEB_SEARCH_API_KEY
    enabled: false

  # Example: Database query server with authentication
  - name: database
    url: https://mcp-database.example.com
    auth_env_var: DATABASE_API_TOKEN
    enabled: false  # Disabled by default

  # Example: Code analysis server
  - name: code_analyzer
    url: https://api.codeanalyzer.com/mcp
    auth_env_var: CODE_ANALYZER_KEY
    enabled: false

# Configuration Notes:
# 
# HTTP-based MCP Servers:
# - All servers use HTTP connections via FastMCP client
# - url: The HTTP endpoint for the MCP server
# - auth_env_var: Environment variable containing the API key/token (optional)
#
# Server Control:
# - enabled: Set to false to disable a server without removing configuration
# - Disabled servers are completely ignored during initialization
#
# Local Development:
# - Use localhost URLs for local MCP server implementations
# - The existing mcp_server in this repo runs on http://localhost:8001/mcp/
# - Enable only necessary servers to reduce startup time
#
# Production Deployment:
# - Use HTTPS URLs for remote MCP servers
# - Ensure all auth_env_var environment variables are properly configured
# - Monitor server health through the /health endpoint
#
# Authentication:
# - Currently authentication is handled by FastMCP client internals
# - TODO: Add explicit authentication header support